//------------------------------------------------------------------------------
// <auto-generated>
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System;
using Microsoft.AspNetCore.Identity;
using BuilderGenerator.Tests.Integration.Net90.ProjectRef.Models.Entities;

#nullable disable
#pragma warning disable 618 // Suppress complaints about obsolete properties.
#pragma warning disable CS8669 // Nullability of type of parameter doesn't match target type.

namespace BuilderGenerator.Tests.Unit.Examples
{
    public partial class CustomIdentityUserBuilder : BuilderGenerator.Builder<BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser>
    {
        /// <summary>Gets or sets the object returned by this builder.</summary>
        /// <value>The constructed object.</value>
        public System.Lazy<BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser> CustomIdentityUser { get; set; }

        // <summary>Gets or sets the action to be performed when an object is built.</summary>
        // <remarks>
        //     This is only performed when an object is created from scratch for the first time.
        //     When the object value has been injected from outside, this action will not be called.
        // </remarks>
        public System.Action<BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser> PostBuildAction { get; set; }


        public System.Lazy<System.Guid> Id = new System.Lazy<System.Guid>(() => default(System.Guid));

        /// <summary>Initializes a new instance of the <see cref="CustomIdentityUserBuilder"/> class using the provided <see cref="BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser" /> for the value.</summary>
        /// <param name="value">The <see cref="BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser" /> instance to build on.</param>
        /// <remarks>Note: <paramref name="value" /> is not simply a template. The actual instance will be remembered and returned.</remarks>
        public CustomIdentityUserBuilder(BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser value = null)
        {
            if (value != null)
            {
                WithCustomIdentityUser(value);
            }
        }

        public override BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser Build()
        {
            if (CustomIdentityUser?.IsValueCreated != true)
            {
                CustomIdentityUser = new System.Lazy<BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser>(() =>
                {
                    var result = new BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser
                    {
                        Id = Id.Value,
                    };

                    return result;
                });

                if (PostBuildAction != null)
                {
                    PostBuildAction(CustomIdentityUser.Value);
                }
            }

            return CustomIdentityUser.Value;
        }

        /// <summary>Sets the object to be returned by this instance.</summary>
        /// <param name="value">The object to be returned.</param>
        /// <returns>A reference to this builder instance.</returns>
        public CustomIdentityUserBuilder WithCustomIdentityUser(BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser value)
        {
            CustomIdentityUser = new System.Lazy<BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser>(() => value);
            WithValuesFrom(value);

            return this;
        }

        public CustomIdentityUserBuilder WithPostBuildAction(System.Action<BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser> action)
        {
            PostBuildAction = action;
            return this;
        }

        /// <summary>Populates this instance with values from the provided example.</summary>
        /// <remarks>This is a shallow clone, and does not traverse the example object creating builders for its properties.</remarks>
        public CustomIdentityUserBuilder WithValuesFrom(BuilderGenerator.Tests.Unit.Examples.CustomIdentityUser example)
        {
            WithId(example.Id);

            return this;
        }


        public CustomIdentityUserBuilder WithId(System.Guid value)
        {
            return WithId(() => value);
        }


        public CustomIdentityUserBuilder WithId(System.Func<System.Guid> func)
        {
            Id = new System.Lazy<System.Guid>(func);
            return this;
        }


        public CustomIdentityUserBuilder WithoutId()
        {
            Id = new System.Lazy<System.Guid>(() => default(System.Guid));
            return this;
        }
    }
}
