//------------------------------------------------------------------------------
// <auto-generated>
//
//     Changes to this file may cause incorrect behavior
//     and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.CodeDom.Compiler;
using System;

#nullable disable
#pragma warning disable 618 // Suppress complaints about obsolete properties.
#pragma warning disable CS8669 // Nullability of type of parameter doesn't match target type.

namespace BuilderGenerator.Tests.Unit.Examples
{
    public partial class PersonBuilder : BuilderGenerator.Builder<BuilderGenerator.Tests.Unit.Examples.Person>
    {
        /// <summary>Gets or sets the object returned by this builder.</summary>
        /// <value>The constructed object.</value>
        private System.Lazy<BuilderGenerator.Tests.Unit.Examples.Person> Person { get; set; }

        // <summary>Gets or sets the action to be performed when an object is built.</summary>
        // <remarks>
        //     This is only performed when an object is created from scratch for the first time.
        //     When the object value has been injected from outside, this action will not be called.
        // </remarks>
        private System.Action<BuilderGenerator.Tests.Unit.Examples.Person> PostBuildAction { get; set; }

        public System.Lazy<string> FirstName = new System.Lazy<string>(() => default(string));
        public System.Lazy<string> LastName = new System.Lazy<string>(() => default(string));
        public System.Lazy<string> MiddleName = new System.Lazy<string>(() => default(string));

        /// <summary>Initializes a new instance of the <see cref="PersonBuilder"/> class using the provided <see cref="BuilderGenerator.Tests.Unit.Examples.Person" /> for the value.</summary>
        /// <param name="value">The <see cref="BuilderGenerator.Tests.Unit.Examples.Person" /> instance to build on.</param>
        /// <remarks>Note: <paramref name="value" /> is not simply a template. The actual instance will be remembered and returned.</remarks>
        public PersonBuilder(BuilderGenerator.Tests.Unit.Examples.Person value = null)
        {
            if (value != null)
            {
                WithPerson(value);
            }
        }

        public override BuilderGenerator.Tests.Unit.Examples.Person Build()
        {
            if (Person?.IsValueCreated != true)
            {
                Person = new System.Lazy<BuilderGenerator.Tests.Unit.Examples.Person>(() =>
                {
                    var result = new BuilderGenerator.Tests.Unit.Examples.Person
                    {
                        FirstName = FirstName.Value,
                        LastName = LastName.Value,
                        MiddleName = MiddleName.Value,
                    };

                    return result;
                });

                if (PostBuildAction != null)
                {
                    PostBuildAction(Person.Value);
                }
            }

            return Person.Value;
        }

        /// <summary>Sets the object to be returned by this instance.</summary>
        /// <param name="value">The object to be returned.</param>
        /// <returns>A reference to this builder instance.</returns>
        public PersonBuilder WithPerson(BuilderGenerator.Tests.Unit.Examples.Person value)
        {
            Person = new System.Lazy<BuilderGenerator.Tests.Unit.Examples.Person>(() => value);
            WithValuesFrom(value);

            return this;
        }

        public PersonBuilder WithPostBuildAction(System.Action<BuilderGenerator.Tests.Unit.Examples.Person> action)
        {
            PostBuildAction = action;
            return this;
        }

        /// <summary>Populates this instance with values from the provided example.</summary>
        /// <remarks>This is a shallow clone, and does not traverse the example object creating builders for its properties.</remarks>
        public PersonBuilder WithValuesFrom(BuilderGenerator.Tests.Unit.Examples.Person example)
        {
            WithFirstName(example.FirstName);
            WithLastName(example.LastName);
            WithMiddleName(example.MiddleName);

            return this;
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.FirstName">
/// <summary>
/// The Person's first name.
/// </summary>
/// <remarks>This was a multi-line, indented summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithFirstName(string value)
        {
            return WithFirstName(() => value);
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.FirstName">
/// <summary>
/// The Person's first name.
/// </summary>
/// <remarks>This was a multi-line, indented summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithFirstName(System.Func<string> func)
        {
            FirstName = new System.Lazy<string>(func);
            return this;
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.FirstName">
/// <summary>
/// The Person's first name.
/// </summary>
/// <remarks>This was a multi-line, indented summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithoutFirstName()
        {
            FirstName = new System.Lazy<string>(() => default(string));
            return this;
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.LastName">
/// <summary>The Person's last name.</summary>
/// <remarks>This was a single-line summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithLastName(string value)
        {
            return WithLastName(() => value);
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.LastName">
/// <summary>The Person's last name.</summary>
/// <remarks>This was a single-line summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithLastName(System.Func<string> func)
        {
            LastName = new System.Lazy<string>(func);
            return this;
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.LastName">
/// <summary>The Person's last name.</summary>
/// <remarks>This was a single-line summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithoutLastName()
        {
            LastName = new System.Lazy<string>(() => default(string));
            return this;
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.MiddleName">
/// <summary>A string property marked as obsolete to test the "includeObsolete" attribute parameter.</summary>
/// <remarks>This was a single-line summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithMiddleName(string value)
        {
            return WithMiddleName(() => value);
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.MiddleName">
/// <summary>A string property marked as obsolete to test the "includeObsolete" attribute parameter.</summary>
/// <remarks>This was a single-line summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithMiddleName(System.Func<string> func)
        {
            MiddleName = new System.Lazy<string>(func);
            return this;
        }

        /// <member name="P:BuilderGenerator.Tests.Unit.Examples.Person.MiddleName">
/// <summary>A string property marked as obsolete to test the "includeObsolete" attribute parameter.</summary>
/// <remarks>This was a single-line summary in the original source code.</remarks>
/// </member>
/// 
        public PersonBuilder WithoutMiddleName()
        {
            MiddleName = new System.Lazy<string>(() => default(string));
            return this;
        }
    }
}
